version: '3.8'

# =============================================================================
# NIRVANA Phase 0 Infrastructure - Docker Compose Configuration
# =============================================================================
# This compose file sets up the complete local-first infrastructure stack:
# - Vector databases (Milvus, Qdrant)
# - Relational database (PostgreSQL)
# - LLM orchestration (Flowise)
# - Workflow automation (n8n)
# - Development tools (Jupyter)
# - Content extraction (Apache Tika)
# =============================================================================

services:
  # ---------------------------------------------------------------------------
  # ETCD - Metadata store for Milvus
  # ---------------------------------------------------------------------------
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: nirvana-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${ETCD_DATA_PATH:-./data/etcd}:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - nirvana-network
    restart: unless-stopped

  # ---------------------------------------------------------------------------
  # MINIO - Object storage for Milvus
  # ---------------------------------------------------------------------------
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: nirvana-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - ${MINIO_DATA_PATH:-./data/minio}:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - nirvana-network
    restart: unless-stopped

  # ---------------------------------------------------------------------------
  # MILVUS - Vector database for embeddings
  # ---------------------------------------------------------------------------
  milvus:
    image: milvusdb/milvus:v2.3.3
    container_name: nirvana-milvus
    depends_on:
      - etcd
      - minio
    environment:
      ETCD_ENDPOINTS: ${ETCD_ENDPOINTS:-etcd:2379}
      MINIO_ADDRESS: ${MINIO_ADDRESS:-minio:9000}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "${MILVUS_PORT:-19530}:19530"
      - "9091:9091"
    volumes:
      - ${MILVUS_DATA_PATH:-./data/milvus}:/var/lib/milvus
    command: ["milvus", "run", "standalone"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 90s
    networks:
      - nirvana-network
    restart: unless-stopped

  # ---------------------------------------------------------------------------
  # QDRANT - Alternative vector database
  # ---------------------------------------------------------------------------
  qdrant:
    image: qdrant/qdrant:latest
    container_name: nirvana-qdrant
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - ${QDRANT_DATA_PATH:-./data/qdrant}:/qdrant/storage
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY:-}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - nirvana-network
    restart: unless-stopped

  # ---------------------------------------------------------------------------
  # POSTGRESQL - Relational database
  # ---------------------------------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: nirvana-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-nirvana}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nirvana_local_pass}
      POSTGRES_DB: ${POSTGRES_DB:-nirvana}
      POSTGRES_INITDB_ARGS: "-E UTF8"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ${POSTGRES_DATA_PATH:-./data/postgres}:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nirvana}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nirvana-network
    restart: unless-stopped

  # ---------------------------------------------------------------------------
  # FLOWISE - LLM flow orchestration
  # ---------------------------------------------------------------------------
  flowise:
    image: flowiseai/flowise:latest
    container_name: nirvana-flowise
    depends_on:
      - postgres
    environment:
      - PORT=${FLOWISE_PORT:-3000}
      - FLOWISE_USERNAME=${FLOWISE_USERNAME:-admin}
      - FLOWISE_PASSWORD=${FLOWISE_PASSWORD:-admin}
      - DATABASE_TYPE=${FLOWISE_DATABASE_TYPE:-postgres}
      - DATABASE_HOST=${FLOWISE_DATABASE_HOST:-postgres}
      - DATABASE_PORT=${FLOWISE_DATABASE_PORT:-5432}
      - DATABASE_NAME=${FLOWISE_DATABASE_NAME:-flowise}
      - DATABASE_USER=${FLOWISE_DATABASE_USER:-nirvana}
      - DATABASE_PASSWORD=${FLOWISE_DATABASE_PASSWORD:-nirvana_local_pass}
      - APIKEY_PATH=/root/.flowise
      - SECRETKEY_PATH=/root/.flowise
      - LOG_PATH=/root/.flowise/logs
    ports:
      - "${FLOWISE_PORT:-3000}:3000"
    volumes:
      - ${FLOWISE_DATA_PATH:-./data/flowise}:/root/.flowise
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/v1/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - nirvana-network
    restart: unless-stopped

  # ---------------------------------------------------------------------------
  # N8N - Workflow automation platform
  # ---------------------------------------------------------------------------
  n8n:
    image: n8nio/n8n:latest
    container_name: nirvana-n8n
    depends_on:
      - postgres
    environment:
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-admin}
      - DB_TYPE=${N8N_DB_TYPE:-postgresdb}
      - DB_POSTGRESDB_HOST=${N8N_DB_POSTGRESDB_HOST:-postgres}
      - DB_POSTGRESDB_PORT=${N8N_DB_POSTGRESDB_PORT:-5432}
      - DB_POSTGRESDB_DATABASE=${N8N_DB_POSTGRESDB_DATABASE:-n8n}
      - DB_POSTGRESDB_USER=${N8N_DB_POSTGRESDB_USER:-nirvana}
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_POSTGRESDB_PASSWORD:-nirvana_local_pass}
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
    ports:
      - "${N8N_PORT:-5678}:5678"
    volumes:
      - ${N8N_DATA_PATH:-./data/n8n}:/home/node/.n8n
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - nirvana-network
    restart: unless-stopped

  # ---------------------------------------------------------------------------
  # JUPYTER - Notebook server for data science and experimentation
  # ---------------------------------------------------------------------------
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: nirvana-jupyter
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-nirvana}
      - GRANT_SUDO=yes
    ports:
      - "${JUPYTER_PORT:-8888}:8888"
    volumes:
      - ${JUPYTER_DATA_PATH:-./data/jupyter}:/home/jovyan/work
      - ./:/home/jovyan/work/nirvana-project:ro
    user: root
    command: "start-notebook.sh --NotebookApp.token='${JUPYTER_TOKEN:-nirvana}' --NotebookApp.password='' --NotebookApp.allow_origin='*'"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/api"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - nirvana-network
    restart: unless-stopped

  # ---------------------------------------------------------------------------
  # APACHE TIKA - Content extraction and parsing
  # ---------------------------------------------------------------------------
  tika:
    image: apache/tika:latest
    container_name: nirvana-tika
    environment:
      - TIKA_JAVA_HEAP_SIZE=${TIKA_JAVA_HEAP_SIZE:-1g}
    ports:
      - "${TIKA_PORT:-9998}:9998"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9998/tika"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - nirvana-network
    restart: unless-stopped

# =============================================================================
# NETWORKS - Shared network for inter-service communication
# =============================================================================
networks:
  nirvana-network:
    name: ${DOCKER_NETWORK_NAME:-nirvana-network}
    driver: bridge

# =============================================================================
# VOLUMES - Named volumes for persistent data (optional, using bind mounts above)
# =============================================================================
volumes:
  etcd-data:
  minio-data:
  milvus-data:
  qdrant-data:
  postgres-data:
  flowise-data:
  n8n-data:
  jupyter-data:
